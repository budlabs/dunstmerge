#!/bin/bash

NAME="dunstmerge"
VERSION="0.003"
AUTHOR="budRich"
CONTACT='robstenklippa@gmail.com'
CREATED="2018-07-09"
UPDATED="2018-07-09"

DUNST_DIR="$HOME/.config/dunst"

main(){
  while getopts :vh option; do
    case "${option}" in
      v) printf '%s\n' \
           "$NAME - version: $VERSION" \
           "updated: $UPDATED by $AUTHOR"
         exit ;;
      h|*) printinfo && exit ;;
    esac
  done

  targetLayout=$1

  [[ -f $DUNST_DIR/layouts/$targetLayout ]] \
    || { 
        [[ -f $DUNST_DIR/dunstrc ]] && \
          targetLayout=$(awk -F':' '
            $1 == "# layout" 
            {print $2; exit}
          ' "$DUNST_DIR/dunstrc")
        }

  [[ -f $DUNST_DIR/layouts/$targetLayout ]] \
    || targetLayout="default"

  [[ ! -d $DUNST_DIR/layouts ]] && dminstall

  (
    cd "$DUNST_DIR" || exit 1
    {
      # toilet dunstrc | awk '{print "# " $0}'
      echo "# layout:$targetLayout"
      echo
      grep -v '# syntax:ssHash' "dunst-theme"
      grep -v '# syntax:ssHash' "layouts/$targetLayout"
      grep -v '# syntax:ssHash' dunst-settings
      echo '# syntax:ssHash'
      
    } > dunstrc
  )

  pidof dunst > /dev/null && killall dunst
  dunst > /dev/null &
}

dminstall(){
  drc="$DUNST_DIR/dunstrc"
  orc="/usr/share/dunst/dunstrc"

  declare -A adnst
  declare -A asdnst

  readrc "$orc"
  cp -f $orc ${drc}-default

  [[ -f $drc ]] && {
    cp -f $drc ${drc}-original
    readrc "$drc"
  }

  mkdir -p $DUNST_DIR/layouts

  printfiles

  [[ ${#asdnst[@]} -gt 0 ]] && {
    
    for k in $(printf '%s\n' "${!asdnst[@]}" | sort); do
      sect=${k%%-*}
      var=${k#*-}
      val="${asdnst[$k]}"

      [[ $sect != $osect ]] && {
        printf '\n[%s]\n' $sect
        osect=$sect
      }

      printf '  %s = %s\n' "$var" "$val"
    done
    echo
  } >> $DUNST_DIR/dunst-settings

  echo "# syntax:ssHash" >> $DUNST_DIR/dunst-settings
}

readrc(){
  [[ -f $1 ]] && eval "$(awk '/./ && $1 !~ /^[#]/{
    if (/^[[]/) {
      sub(/^[[]/,"",$0)
      sub(/[]]$/,"",$0)
      cursect=$1

      special=0
      if (cursect !~ /^urgency|global|experimental|shortcuts/)
        special=1

    } else {
      var=$1
      $1=$2=""
      sub(/^[[:space:]]*/,"",$0)
      sub(/[[:space:]]*$/,"",$0)
      if (special==0) avar[cursect][var]=$0
      if (special==1) svar[cursect][var]=$0
    }
  }

  END {
    for (s in avar){
      for(k in avar[s]){
        gsub(/["]/,"\\\"",avar[s][k])
        print "adnst["s"_"k"]=\"" avar[s][k] "\""
      }
    }

    for (s in svar){
      for(k in svar[s]){
        gsub(/["]/,"\\\"",svar[s][k])
        print "asdnst["s"-"k"]=\"" svar[s][k] "\""
      }
    }
  }' "$1")"
}

printfiles(){

rm -f \
  $DUNST_DIR/layouts/default \
  $DUNST_DIR/dunst-settings \
  $DUNST_DIR/dunst-theme
  
echo "[urgency_low]
  # IMPORTANT: colors have to be defined in quotation marks.
  # Otherwise the "#" and following would be interpreted as a comment.
  background = ${adnst[urgency_low_background]}
  foreground = ${adnst[urgency_low_foreground]}
  frame_color = ${adnst[urgency_low_frame_color]}
  timeout = ${adnst[urgency_low_timeout]}

[urgency_normal]
  background = ${adnst[urgency_normal_background]}
  foreground = ${adnst[urgency_normal_foreground]}
  frame_color = ${adnst[urgency_normal_frame_color]}
  timeout = ${adnst[urgency_normal_timeout]}

[urgency_critical]
  background = ${adnst[urgency_critical_background]}
  foreground = ${adnst[urgency_critical_foreground]}
  frame_color = ${adnst[urgency_critical_frame_color]}
  timeout = ${adnst[urgency_critical_timeout]}

[global]
  # Defines color of the frame around the notification window.
  frame_color = ${adnst[global_frame_color]}

  # Define a color for the separator.
  # possible values are:
  #  * auto: dunst tries to find a color fitting to the background;
  #  * foreground: use the same color as the foreground;
  #  * frame: use the same color as the frame;
  #  * anything else will be interpreted as a X color.
  separator_color = ${adnst[global_separator_color]}

  # Paths to default icons.
  icon_path = ${adnst[global_icon_path]}

# syntax:ssHash
" > $DUNST_DIR/dunst-theme

echo "  geometry = ${adnst[global_geometry]}
  #          [{width}]x{height}[+/-{x}+/-{y}]

  font = ${adnst[global_font]}

  # The format of the message.  Possible variables are:
  #   %a  appname
  #   %s  summary
  #   %b  body
  #   %i  iconname (including its path)
  #   %I  iconname (without its path)
  #   %p  progress value if set ([  0%] to [100%]) or nothing
  #   %n  progress value if set without any extra characters
  #   %%  Literal %
  # Markup is allowed
  format = ${adnst[global_format]}

  # The spacing between lines.  If the height is smaller than the
  # font height, it will get raised to the font height.
  line_height = ${adnst[global_line_height]}

  frame_width = ${adnst[global_frame_width]}
  separator_height = ${adnst[global_separator_height]}
  notification_height = ${adnst[global_notification_height]}
  padding = ${adnst[global_padding]}
  horizontal_padding = ${adnst[global_horizontal_padding]}
  transparency = ${adnst[global_transparency]}

  # Shrink window if it's smaller than the width.
  # Will be ignored if  width is 0.
  shrink = ${adnst[global_shrink]}

  # Possible values are "left", "center" and "right".
  alignment = ${adnst[global_alignment]}

  # Possible values are "start", "middle" and "end".
  ellipsize = ${adnst[global_ellipsize]}

  ignore_newline = ${adnst[global_ignore_newline]}
  word_wrap = ${adnst[global_word_wrap]}

  # Align icons left/right/off
  icon_position = ${adnst[global_icon_position]}

  # Scale larger icons down to this size, set to 0 to disable
  max_icon_size = ${adnst[global_max_icon_size]}

# syntax:ssHash

" > $DUNST_DIR/layouts/default

echo "  # Which monitor should the notifications be displayed on.
  monitor = ${adnst[global_monitor]}
  follow = ${adnst[global_follow]}

  # Show how many messages are currently hidden (because of geometry).
  indicate_hidden = ${adnst[global_indicate_hidden]}

  # Sort messages by urgency.
  sort = ${adnst[global_sort]}

  # Don't remove messages, if the user is idle (no mouse or keyboard input)
  # for longer than idle_threshold seconds.
  # Set to 0 to disable.
  # Transient notifications ignore this setting.
  idle_threshold = ${adnst[global_idle_threshold]}

  markup = ${adnst[global_markup]}

  # Show age of message if message is older than show_age_threshold
  # seconds.
  # Set to -1 to disable.
  show_age_threshold = ${adnst[global_show_age_threshold]}

  # Merge multiple notifications with the same content
  stack_duplicates = ${adnst[global_stack_duplicates]}

  # Hide the count of merged notifications with the same content
  hide_duplicate_count = ${adnst[global_hide_duplicate_count]}

  # Display indicators for URLs (U) and actions (A).
  show_indicators = ${adnst[global_show_indicators]}
  dmenu = ${adnst[global_dmenu]}
  browser = ${adnst[global_browser]}

  # Should a notification popped up from history be sticky or timeout
  # as if it would normally do.
  sticky_history = ${adnst[global_sticky_history]}
  history_length = ${adnst[global_history_length]}


  # Always run rule-defined scripts, 
  # even if the notification is suppressed
  always_run_script = ${adnst[global_always_run_script]}
  title = ${adnst[global_title]}
  class = ${adnst[global_class]}
  startup_notification = ${adnst[global_startup_notification]}
  force_xinerama = ${adnst[global_force_xinerama]}

[experimental]
  per_monitor_dpi = ${adnst[experimental_monitor_dpi]}

[shortcuts]

  # Available modifiers are "ctrl", "shift", "mod1" (alt)
  # "mod2", "mod3" and "mod4" (windows-key).

  # Close notification.
  close = ${adnst[shortcuts_close]}

  # Close all notifications.
  close_all = ${adnst[shortcuts_close_all]}

  # Redisplay last message(s).
  history = ${adnst[shortcuts_history]}

  # action (dmenu)
  context = ${adnst[shortcuts_context]}" \
    > "$DUNST_DIR/dunst-settings"
}

printinfo(){
about=\
'`dunstmerge` - Dunst layout manager

SYNOPSIS
--------

`dunstmerge` [`-v`|`-h`]  
`dunstmerge` [*LAYOUT*]

DESCRIPTION
-----------

`dunstmerge` merges three different files inside *DUNST_DIR*
into one dunstrc file. The files that gets merged are:  

- dunst-theme  
- layouts/LAYOUT  
- dunst-settings  

If *LAYOUT* is omitted `dunstmerge` will look in the
current `dunstrc` file for the name of the current layout
and use that, which will result in a reload of dunst.
If *layouts/LAYOUT* doesn'"'"'t exist, *default* will be used.  

The advantage of using this is that it will be easy
to manage multiple layouts and themes, that can
be independently generated.  

If the directory *DUNST_DIR/layouts* doesnt exist,
`dunstmerge` will split the current (or the default)
*dunstrc* file and create a default layout the first
time `dunstmerge` is executed. It will also create
*dunst-theme* and *dunst-settings* and copy any old
dunstrc to *DUNST_DIR/dunstrc-orginal*. It will also
copy the default dunstrc to *DUNST_DIR/dunstrc-default*.

OPTIONS
-------

`-v`
  Show version and exit.

`-h`
  Show help and exit.


FILES
-----

*DUNST_DIR*  
Directory containing the dunst configuration files, themes
and layouts.  

*DUNST_DIR/dunstrc*  
This file will get generated by `dunstmerge` and used by
`dunst`.  

*DUNST_DIR/dunstrc-original*  
If a dunstrc file existed prior to the first time `dunstrc`,
was executed, that file will be copied here.  

*DUNST_DIR/dunstrc-default*  
This is just a copy of */usr/share/dunst/dunstrc* for 
reference. It has very good comments.  

*DUNST_DIR/dunst-theme*  
Contains theme specific settings, such as colors and icons.  

*DUNST_DIR/layouts/LAYOUT*  
Layout specific settings, such as geometry and text options.  

*DUNST_DIR/layouts/default*  
default layout file.  

*DUNST_DIR/dunst-settings*  
Other *global* dunst settings that are independent of the
theme or the layout.  

*DUNST_DIR/dunst-default*  
Default dunstrc, copied from */usr/share/dunst/dunstrc*  


DEPENDENCIES
------------
  
dunst  
'

bouthead="
${NAME^^} 1 ${CREATED} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${AUTHOR} <${CONTACT}>
<https://budrich.github.io>

SEE ALSO
--------

dunst(1), dunstify, notify-send, mondo(1)
"
  case "$1" in
    m ) printf '%s' "# ${about}" ;;
    
    f ) 
      printf '%s' "${bouthead}"
      printf '%s' "${about}"
      printf '%s' "${boutfoot}"
    ;;

    ''|* ) 
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}



if [ "$1" = "md" ]; then
  printinfo m
  exit
elif [ "$1" = "man" ]; then
  printinfo f
  exit
else
  main "${@}"
fi
